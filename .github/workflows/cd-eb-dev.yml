name: CD • Elastic Beanstalk (dev)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write    # for OIDC
  contents: read

env:
  AWS_REGION:         ${{ secrets.AWS_REGION }}
  AWS_ROLE_ARN:       ${{ secrets.AWS_ROLE_ARN }}
  ECR_REPO:           ${{ secrets.ECR_REPO }}        # e.g. "it-ops-demo"
  EB_APP_NAME:        ${{ secrets.EB_APP_NAME }}     # e.g. "it-ops-demo"
  EB_ENV_NAME:        ${{ secrets.EB_ENV_DEV }}      # e.g. "it-ops-demo-env"

jobs:
  deploy:
    name: Build → Push to ECR → EB Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq zip unzip

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists
        run: |
          set -euo pipefail
          aws ecr describe-repositories --repository-names "${ECR_REPO}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPO}" >/dev/null
          echo "ECR repo ready: ${ECR_REPO}"

      - name: Derive build metadata
        id: meta
        run: |
          set -euo pipefail
          SHORT_SHA=$(git rev-parse --short HEAD || echo "local")
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "SHORT_SHA=${SHORT_SHA}"          >> $GITHUB_ENV
          echo "BUILD_DATE=${BUILD_DATE}"        >> $GITHUB_ENV
          echo "IMG_TAG=sha-${GITHUB_SHA}"       >> $GITHUB_ENV
          echo "REGISTRY=${{ steps.ecr.outputs.registry }}" >> $GITHUB_ENV
          echo "ECR_URI=${{ steps.ecr.outputs.registry }}/${ECR_REPO}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          set -euo pipefail
          docker build \
            --build-arg APP_VERSION="${SHORT_SHA}" \
            --build-arg GIT_SHA="${SHORT_SHA}" \
            --build-arg BUILD_DATE="${BUILD_DATE}" \
            -t "${ECR_URI}:${IMG_TAG}" \
            .

      - name: Push image to ECR (retry with backoff)
        run: |
          set -euo pipefail
          export DOCKER_CLIENT_TIMEOUT=600
          export COMPOSE_HTTP_TIMEOUT=600
          for attempt in 1 2 3 4 5; do
            if docker push "${ECR_URI}:${IMG_TAG}"; then
              echo "Push succeeded on attempt ${attempt}"
              exit 0
            fi
            echo "Push failed (attempt ${attempt}). Sleeping $((attempt*15))s…"
            sleep $((attempt*15))
          done
          echo "ERROR: docker push failed after retries" >&2
          exit 1

      - name: Render Dockerrun (v1) with ECR image
        run: |
          set -euo pipefail
          cat > Dockerrun.aws.json <<'JSON'
          {
            "AWSEBDockerrunVersion": "1",
            "Image": { "Name": "REPLACED_AT_RUNTIME", "Update": "true" },
            "Ports": [ { "ContainerPort": "8080" } ]
          }
          JSON
          # portable in-place edit (creates .bak then removes it)
          sed -i.bak "s|REPLACED_AT_RUNTIME|${ECR_URI}:${IMG_TAG}|g" Dockerrun.aws.json
          rm -f Dockerrun.aws.json.bak
          echo "----- Dockerrun (rendered) -----"
          cat Dockerrun.aws.json

      - name: Validate Dockerrun (strip BOM, assert version=1, show checksum)
        run: |
          set -euo pipefail
          echo '----- Dockerrun (rendered) -----'
          cat Dockerrun.aws.json
          echo
          echo '----- Strip BOM if present -----'
          python3 - <<'PY'
          import pathlib
          p = pathlib.Path('Dockerrun.aws.json')
          b = p.read_bytes()
          if b.startswith(b'\xef\xbb\xbf'):
              p.write_bytes(b[3:])
              print('BOM removed')
          else:
              print('No BOM')
          PY
          echo '----- Validate JSON & version -----'
          jq -e '.AWSEBDockerrunVersion == "1"' Dockerrun.aws.json >/dev/null \
            || (echo 'ERROR: AWSEBDockerrunVersion must be "1"' && exit 1)
          echo 'JSON OK, version = 1'
          echo '----- SHA1 of Dockerrun -----'
          echo "ECR image to deploy: ${ECR_URI}:${IMG_TAG}"
          shasum Dockerrun.aws.json

      - name: Build EB source bundle (Dockerrun only)
        run: |
          set -euo pipefail
          rm -rf bundle && mkdir bundle
          cp Dockerrun.aws.json bundle/
          cd bundle
          zip "../app-${GITHUB_SHA}.zip" Dockerrun.aws.json
          cd -
          echo "----- ZIP contents -----"
          unzip -l "app-${GITHUB_SHA}.zip"
          echo "----- Dockerrun inside ZIP -----"
          unzip -p "app-${GITHUB_SHA}.zip" Dockerrun.aws.json

      - name: Determine EB S3 bucket
        id: eb_bucket
        run: |
          set -euo pipefail
          # This returns (and creates if needed) your account's EB app version bucket
          BUCKET=$(aws elasticbeanstalk create-storage-location --output text)
          echo "EB_BUCKET=${BUCKET}" >> $GITHUB_ENV
          echo "Using EB bucket: ${BUCKET}"

      - name: Upload bundle to EB S3
        run: |
          set -euo pipefail
          ZIP_KEY="app-${GITHUB_SHA}.zip"
          aws s3 cp "app-${GITHUB_SHA}.zip" "s3://${EB_BUCKET}/${ZIP_KEY}"
          echo "ZIP_KEY=${ZIP_KEY}" >> $GITHUB_ENV

      - name: Create EB application version
        run: |
          set -euo pipefail
          aws elasticbeanstalk create-application-version \
            --application-name "${EB_APP_NAME}" \
            --version-label "sha-${GITHUB_SHA}" \
            --source-bundle S3Bucket="${EB_BUCKET}",S3Key="${ZIP_KEY}"
          echo "Created EB app version sha-${GITHUB_SHA}"

      - name: Update EB environment
        run: |
          set -euo pipefail
          aws elasticbeanstalk update-environment \
            --application-name "${EB_APP_NAME}" \
            --environment-name "${EB_ENV_NAME}" \
            --version-label "sha-${GITHUB_SHA}"
          echo "Triggered deploy to ${EB_ENV_NAME}"

      - name: Show EB events (tail)
        run: |
          set -euo pipefail
          # Optional: fetch the latest few events to help debugging
          aws elasticbeanstalk describe-events \
            --environment-name "${EB_ENV_NAME}" \
            --max-records 25 \
            --query 'Events[].[EventDate,Severity,Message]' \
            --output table