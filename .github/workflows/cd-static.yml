name: CD • Static Website (S3 + CloudFront)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'src/_includes/**'
      - 'assets/**'
      - 'static/**'
      - 'robots.txt'
      - 'sitemap.xml'
      - 'favicon.ico'
      - 'package.json'
      - 'package-lock.json'
      - '.eleventy.js'
      - '.github/workflows/cd-static.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:   us-east-1
  AWS_ROLE_ARN: arn:aws:iam::911902230696:role/GitHubActions-StaticDeployer
  S3_BUCKET:    bitcurrents.net
  CF_DISTR_ID:  E3NP32DM80HARU

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Safety: don’t allow stray CSS/JS in repo root
      - name: Enforce no root-level CSS/JS
        run: |
          set -euo pipefail
          offenders=$(find . -maxdepth 1 -type f \( -name "*.css" -o -name "*.js" \) \
            -not -name ".eleventy.js" -print | sed 's|^\./||')
          if [ -n "$offenders" ]; then
            echo "::error::Do not place CSS/JS in repo root. Move to assets/css or assets/js:"; echo "$offenders"; exit 1
          fi
          echo "Folder structure OK."

      - name: Install Node (for Eleventy)
        uses: actions/setup-node@v4
        with: { node-version: '20' }

      - name: Build site (Eleventy)
        run: |
          npm ci
          npx @11ty/eleventy

      # Remove junk prefixes that should never live in the bucket
      - name: Hard cleanup of unwanted prefixes
        shell: bash
        run: |
          set -euo pipefail
          for p in _site dist node_modules test projects _next www public tmp; do
            aws s3 rm "s3://${S3_BUCKET}/${p}" --recursive --only-show-errors || true
          done

      # Pages & other non-asset files (short cache) — cleans the root
      - name: Upload Eleventy pages (clean root)
        shell: bash
        run: |
          set -euo pipefail
          [ -d "_site" ] || { echo "::error::_site not found"; exit 1; }
          aws s3 sync "_site/" "s3://$S3_BUCKET/" \
            --delete \
            --exclude "assets/*" \
            --cache-control "public, max-age=0, must-revalidate"

      # Static assets (long cache) — cleans only the assets subtree
      - name: Upload assets (css/js/images) with long cache
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "_site/assets" ]; then
            aws s3 sync "_site/assets/" "s3://$S3_BUCKET/assets/" \
              --delete \
              --exact-timestamps \
              --cache-control "public, max-age=31536000, immutable"
          else
            echo "No _site/assets directory found; skipping assets upload."
          fi

      # If robots/sitemap are generated into _site, they’re already synced above.
      # If you keep authoring them at repo root, uncomment this block to force-copy:
      # - name: Upload root metadata (optional)
      #   run: |
      #     set -euo pipefail
      #     [ -f "robots.txt" ]  && aws s3 cp robots.txt  "s3://$S3_BUCKET/robots.txt"  --content-type "text/plain; charset=utf-8" --cache-control "public, max-age=300, must-revalidate" || true
      #     [ -f "sitemap.xml" ] && aws s3 cp sitemap.xml "s3://$S3_BUCKET/sitemap.xml" --content-type "application/xml; charset=utf-8" --cache-control "public, max-age=300, must-revalidate" || true
      #     [ -f "favicon.ico" ] && aws s3 cp favicon.ico "s3://$S3_BUCKET/favicon.ico" --content-type "image/x-icon" --cache-control "public, max-age=31536000, immutable" || true

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation --distribution-id "$CF_DISTR_ID" --paths "/*"